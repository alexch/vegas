grammar Rhtml

  rule doc
    space node space x:doc? <Erector::Indenting> {
      def convert
        if x.empty?
          node.convert
        else
          node.convert + x.convert
        end
      end
    }
  end

  rule node
    yield_with_name / yield / hprintlet / printlet / scriptlet / doctype / directive / self_closing_tag / imgtag / closetag / opentag / text
  end

  # Argh. For some reason I can't get this to work, so I split it into two rules
  # rule yield
  #   '<%=' space 'yield' space (':' varname space)? '%>' <Erector::Indenting> {
  #     def convert
  #       var = "@content_for_" + varname.nil? ? "layout" : varname.text_value
  #       line "rawtext #{var} # Note: you must define #{var} elsewhere"
  #     end
  #   }
  # end

  rule yield_with_name
    '<%=' space 'yield' space ':' varname space '%>' <Erector::Indenting> {
      def convert
        var = "@content_for_" + varname.text_value
        line "rawtext #{var} # Note: you must define #{var} elsewhere"
      end
    }
  end

  rule yield
    '<%=' space 'yield' space '%>' <Erector::Indenting> {
      def convert
        var = "@content_for_layout"
        line "rawtext #{var} # Note: you must define #{var} elsewhere"
      end
    }
  end

  rule scriptlet
    '<%' space code space '%>' <Erector::Indenting> {
      def convert
        text = code.text_value.strip
        if text =~ /\bdo( |.*|)?$/
          line_in text
        elsif text == "end"
          line_out text
        else
          line text
        end
      end
    }
  end

  rule printlet
    '<%=' space code space '%>' <Erector::Indenting> {
      def convert
        line "rawtext #{code.convert}"
      end
    }
  end

  rule hprintlet
    '<%=' space 'h' ' '+ code space '%>' <Erector::Indenting> {
      def convert
        line "text #{code.convert}"
      end
    }
  end

  rule code
    (('%' !'>') /  [^%])* <Erector::Indenting> {
      def convert
        code = text_value.strip
        # matches a word, followed by either a word, a string, or a symbol
        result = code.gsub(/^(\w+) ([\w:"'].*)$/, '\1(\2)')
        result
      end
    }
  end

	rule doctype
		'<!DOCTYPE' [^>]* '>' <Erector::Indenting> {
			def convert
				line "rawtext '#{text_value}'"
			end
		}
	end
	
	rule directive
	  '<!' [^>]* '>' <Erector::Indenting> {
			def convert
				line "rawtext '#{text_value}'"
			end
		}
	end

  rule tagname
    [A-Za-z0-9_:-]+
  end
  
  rule varname
    [A-Za-z0-9_]+
  end

  rule self_closing_tag
    '<' tag_name:tagname attrs:attributes? space '/>' <Erector::Indenting> {
      def convert
        line "#{tag_name.text_value}#{attrs.empty? ? "" : attrs.convert}"
      end
    }
  end

  rule opentag
   '<' tag_name:tagname attrs:attributes? space '>' <Erector::Indenting> {
      def convert
        line_in "#{tag_name.text_value}#{attrs.empty? ? "" : attrs.convert} do"
      end
    }
  end

  rule imgtag
   '<' tag_name:'img' attrs:attributes? space '>' <Erector::Indenting> {
      def convert
        line "#{tag_name.text_value}#{attrs.empty? ? "" : attrs.convert}"
      end
    }
  end

  rule closetag
   '</' tag_name:tagname '>' <Erector::Indenting> {
      def convert
        line_out "end"
      end
    }
  end

  rule text
    (([<>] !(tagname / [/%!])) / [^<>])+ <Erector::Indenting> {
      def convert
        stripped = text_value.strip
        if stripped.empty?
          ""
        else
          line "text '#{text_value.strip.html_unescape}'"
        end
      end
    }
  end

  rule attributes
		first:attribute rest:attributes* {
			def convert
				" " + first.convert + 
					if rest.empty? 
						""
					else
					  ",#{rest.elements.first.convert}"  # this is hacky -- is there a better way?
					end
			end
		}
	end

  rule attribute
		space n:(tagname) space '=' space v:quoted space {
      def convert
        attr_name = (n.text_value =~ /[-:]/) ? "'#{n.text_value}'" : ":#{n.text_value}"
        "#{attr_name} => '#{v.value.html_unescape.escape_single_quotes}'"
      end
    }
  end

  rule quoted
    (('"' val:([^"]*) '"') / ('\'' val:([^']*) '\'')) {
      def value
        val.text_value
      end
    }
  end

  rule space
    [ \n\t]*
  end

end
